[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}


[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[gcode_macro M900]
gcode:
    #Marlin Linear Advance Copatibility 
    # Parameters
    {% set k = params.K|default(0)|float %}
    
    SET_PRESSURE_ADVANCE ADVANCE={k}

[gcode_macro NEVERMORE_ON]
gcode:
    {% set speed = params.SPEED|default(0.75)|float %}
    SET_FAN_SPEED FAN=nevermore SPEED={speed}

[gcode_macro NEVERMORE_OFF]
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED=0


#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600

# Cura: PRINT_START BED={material_bed_temperature_layer_0} HOTEND={material_print_temperature_layer_0} CHAMBER={build_volume_temperature}
# SupS: PRINT_START BED=[first_layer_bed_temperature] HOTEND=[first_layer_temperature] CHAMBER=[chamber_temperature]
# PruS: PRINT_START BED=[first_layer_bed_temperature] HOTEND=[first_layer_temperature]
[gcode_macro PRINT_START]
gcode:        
    # Parameters
    {% set BED = params.BED|int %}
    {% set HOTEND = params.HOTEND|int %}
    {% set CHAMBER = params.CHAMBER|default(0)|int %}

    SET_GCODE_OFFSET Z=0.0         ; Reset the G-Code Z offset (adjust Z offset if needed)
    BED_MESH_CLEAR                 ; Clear Mesh State
    G21                            ; Set units to millimeters
    G90                            ; Use absolute coordinates
    M83                            ; Use relative distances for extrusion
    M220 S100                      ; Reset speed to 100%
    M221 S100                      ; Reset flow to 100%
    G28                            ; Home all axes
    QUAD_GANTRY_LEVEL              ; Quad Gantry Level
    G28                            ; Home all axes again

    M117 Preheating...
    {% if printer.extruder.temperature < 180 %}
        M104 S180                      ; Preheat nozzle
    {% endif %}
    M190 S{BED}                    ; Wait for bed to reach first layer temperature
    HEAT_SOAK
    G32                            ; Home all axes and perform QGL
    BED_MESH_CALIBRATE             ; Perform bed mesh probing
    #BED_MESH_PROFILE SAVE=CURRENT
    #BED_MESH_PROFILE LOAD=1
    G1 X200 Y309 F10000            ; Move next to Z endstop position
    M109 S{EXTRUDER_TEMP}          ; Set and wait for nozzle to reach temperature
    G1 Z-2 F3000
    G28 Z                          ; Home Z with hot nozzle
    
    # <insert routines>
    G32                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed 
    PRIME_LINE
    G1 Z20 F3000                   ; move nozzle away from bed 
    M117 Printing...

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear    
    BED_MESH_CLEAR
    M117 Finished!

[gcode_macro PRIME_LINE]
gcode: 
    M117 Prime Line
    G92 E0;
    G90
    G0 X5 Y5 F6000
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G90

[gcode_macro BRUSH_WIPE]
gcode:
    M118 E1 Wipe on nozzle brush

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(175) %}      #edit to your park position
    {% set y = params.Y|default(5) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME


# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.
[gcode_macro M600]
gcode:
    {% set X = params.X|default(175)|float %}
    {% set Y = params.Y|default(5)|float %}
    {% set Z = params.Z|default(20)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.
[gcode_macro QUERY_BME688]
gcode:
    {% set sensor = printer["bme280 air_quality_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure:    %.2f hPa\n"
        "Humidity:    %.2f%%\n"
        "Gas:         %.2f%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas))}

[gcode_macro M105]
description: Report Temperatures
rename_existing:            M105.1
gcode:
   M105.1
   {% if printer.heater_bed.target > 75 and printer["fan_generic nevermore"].speed == 0.0 %}
       NEVERMORE_ON
   {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
    #before the original gcode
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G1 X125 Y125 Z5 F6000
    #the original gcode
    BASE_BED_MESH_CALIBRATE
    #after the original gcode

#[gcode_macro M105]
#rename_existing:            M105.
#gcode:  
#
#   M105.1
#
#   #if the extruder is off
#   {% if printer.extruder.target == 0 %}
#
#      #Set the LED to red if the extruder is off but is still hot, otherwise 
#      # set the color to green
#      {% if printer.extruder.temperature > 60.0 %}
#         SET_LED LED=temp_leds RED=1 GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1
#      {% else %}
#         SET_LED LED=temp_leds RED=0 GREEN=1 BLUE=0 INDEX=0  TRANSMIT=1
#      {% endif %}     
#
#   {% else %}
#
#         #if the extruder temp is at target temperature 
#         {% if printer.extruder.temperature >= printer.extruder.target - 4.0 %}
#            SET_LED LED=temp_leds RED=1 GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1
#
#         #if the extruder is still heating
#         {% else %}
#            {% set scaler = printer.extruder.temperature|float / printer.extruder.target|float %}
#            SET_LED LED=temp_leds RED={ scaler|float * 1 } GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1
#         {% endif %}  
#
#   {% endif %}

#[delayed_gcode set_displaytemp_timer]
#initial_duration: 1
#gcode:
#
#    SET_LED_TEMPERATURES
#    UPDATE_DELAYED_GCODE ID=set_displaytemp_timer DURATION=1
    
#[gcode_macro SET_LED_TEMPERATURES]
#gcode:
#    {% if printer.extruder.temperature >= 200 %}
#        SET_LED LED=lights RED=1.00 GREEN=0.0 BLUE=0.00
#    {% elif printer.extruder.temperature >= 180 %}
#        SET_LED LED=lights RED=1.00 GREEN=0.60 BLUE=0.00
#    {% elif printer.extruder.temperature >= 160 %}
#        SET_LED LED=lights RED=1.00 GREEN=0.40 BLUE=0.00
#    {% elif printer.extruder.temperature >= 140 %}
#        SET_LED LED=lights RED=0.80 GREEN=0.20 BLUE=0.00
#    {% elif printer.extruder.temperature >= 120 %}
#        SET_LED LED=lights RED=0.60 GREEN=0.20 BLUE=0.00
#    {% elif printer.extruder.temperature >= 100 %}
#        SET_LED LED=lights RED=0.40 GREEN=0.20 BLUE=0.20
#    {% elif printer.extruder.temperature >= 80 %}
#        SET_LED LED=lights RED=0.20 GREEN=0.20 BLUE=0.40
#    {% elif printer.extruder.temperature >= 60 %}
#        SET_LED LED=lights RED=0 GREEN=0.20 BLUE=0.50
#    {% elif printer.extruder.temperature >= 40 %}
#        SET_LED LED=lights RED=0 GREEN=0.00 BLUE=1.0
#    {% endif %}

[gcode_macro heat_soak]
gcode:
    M117 Heat Soaking (TBD)
    M118 E1 Heat Soaking (TBD)

#    {% if printer.toolhead.status == "Ready" %}
#        G28
#        G1 Z10
#        G1 X150 Y150 F6000
#        M140 S100
#        UPDATE_DELAYED_GCODE ID=heatsoakDelay DURATION=600
#    {% else %}
#        M117 "Load disabled while printing!"
#    {% endif %}
    
#[delayed_gcode heatsoakDelay] 
#gcode:
#  M117
#  SET_PIN PIN=caselight VALUE=1
#  G4 P250
#  SET_PIN PIN=caselight VALUE=0
#  G4 P250
#  SET_PIN PIN=caselight VALUE=1
#  G4 P250
#  SET_PIN PIN=caselight VALUE=0